type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | COMMA
  | COLON
  | DOLLAR
  | AT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | CONCAT
  | ASSIGN
  | DOT
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | FUNCTION
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | STRING
  | VOID
  | LIST
  | NODE
  | EDGE
  | GRAPH
  | FUNC
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "gmailparse.mly"
open Ast
# 57 "gmailparse.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACK *);
  261 (* RBRACK *);
  262 (* LBRACE *);
  263 (* RBRACE *);
  264 (* COMMA *);
  265 (* COLON *);
  266 (* DOLLAR *);
  267 (* AT *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* CONCAT *);
  273 (* ASSIGN *);
  274 (* DOT *);
  275 (* NOT *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* AND *);
  283 (* OR *);
  284 (* FUNCTION *);
  285 (* RETURN *);
  286 (* IF *);
  287 (* ELSE *);
  288 (* FOR *);
  289 (* WHILE *);
  290 (* INT *);
  291 (* BOOL *);
  292 (* FLOAT *);
  293 (* STRING *);
  294 (* VOID *);
  295 (* LIST *);
  296 (* NODE *);
  297 (* EDGE *);
  298 (* GRAPH *);
  299 (* FUNC *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  300 (* LITERAL *);
  301 (* BLIT *);
  302 (* ID *);
  303 (* FLIT *);
  304 (* SLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\005\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\009\000\009\000\010\000\010\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\016\000\011\000\011\000\017\000\017\000\006\000\
\006\000\018\000\018\000\007\000\007\000\013\000\013\000\012\000\
\012\000\014\000\014\000\019\000\019\000\015\000\015\000\020\000\
\020\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\001\000\001\000\001\000\001\000\
\004\000\004\000\004\000\006\000\001\000\006\000\000\000\002\000\
\002\000\004\000\003\000\007\000\003\000\005\000\007\000\009\000\
\005\000\000\000\002\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\004\000\006\000\003\000\003\000\003\000\
\007\000\001\000\006\000\000\000\001\000\002\000\004\000\000\000\
\001\000\001\000\003\000\001\000\001\000\001\000\001\000\004\000\
\004\000\000\000\001\000\001\000\003\000\000\000\001\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\082\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\005\000\
\006\000\008\000\007\000\000\000\000\000\000\000\000\000\000\000\
\030\000\032\000\000\000\031\000\033\000\001\000\003\000\000\000\
\013\000\000\000\000\000\000\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\000\055\000\
\000\000\021\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\010\000\011\000\000\000\000\000\000\000\052\000\
\000\000\072\000\000\000\018\000\000\000\000\000\073\000\007\000\
\069\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\
\000\000\067\000\000\000\000\000\000\000\059\000\063\000\000\000\
\000\000\000\000\012\000\014\000\000\000\053\000\020\000\023\000\
\000\000\000\000\000\000\024\000"

let yydgoto = "\002\000\
\003\000\004\000\031\000\032\000\033\000\096\000\146\000\034\000\
\103\000\049\000\084\000\035\000\036\000\099\000\041\000\037\000\
\085\000\097\000\100\000\042\000"

let yysindex = "\010\000\
\000\000\000\000\000\000\048\000\102\000\102\000\000\000\102\000\
\102\000\001\255\102\000\000\255\010\255\025\255\000\000\000\000\
\000\000\000\000\000\000\014\255\023\255\038\255\045\255\084\255\
\000\000\000\000\088\255\000\000\000\000\000\000\000\000\056\255\
\000\000\019\001\093\255\086\255\000\000\104\255\054\002\167\002\
\102\255\109\255\138\255\092\255\092\255\209\002\110\255\167\002\
\118\255\102\000\102\000\102\000\209\002\209\002\209\002\209\002\
\209\002\102\000\102\000\105\255\000\000\102\000\102\000\085\255\
\102\000\102\000\102\000\075\255\102\000\102\000\102\000\102\000\
\102\000\102\000\102\000\102\000\102\000\102\000\000\000\000\000\
\102\000\000\000\078\255\123\255\120\255\209\002\000\000\079\002\
\133\255\104\002\111\255\113\255\114\255\135\255\000\000\152\255\
\146\255\167\002\136\255\148\255\127\002\102\000\157\255\200\002\
\064\255\102\000\064\255\092\255\092\255\222\255\158\255\113\000\
\113\000\134\255\134\255\134\255\134\255\050\000\216\002\150\002\
\167\002\167\002\000\000\219\002\209\002\156\255\185\255\102\000\
\185\255\000\000\000\000\000\000\209\002\219\002\209\002\000\000\
\102\000\000\000\167\002\000\000\184\002\102\000\000\000\000\000\
\000\000\185\255\116\255\219\002\132\255\037\001\000\000\141\255\
\166\255\000\000\167\002\095\000\190\255\000\000\000\000\185\255\
\185\255\102\000\000\000\000\000\102\000\000\000\000\000\000\000\
\192\255\193\255\185\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\183\255\000\000\000\000\
\000\000\000\000\195\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\150\000\000\000\000\000\000\000\000\000\083\255\
\000\000\194\255\000\000\177\000\204\000\198\255\000\000\052\255\
\000\000\000\000\195\255\000\000\000\000\000\000\000\000\000\000\
\201\255\200\255\000\000\209\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\235\255\198\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\211\255\016\255\000\000\236\255\000\000\000\000\000\000\051\255\
\064\001\000\000\091\001\231\000\002\001\118\001\000\000\024\002\
\035\002\145\001\172\001\199\001\226\001\240\255\189\255\000\000\
\115\255\091\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\241\255\000\000\000\000\200\255\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\018\255\000\000\000\000\000\000\000\000\000\000\
\000\000\243\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\253\001\000\000\000\000"

let yygindex = "\000\000\
\000\000\237\000\210\255\216\255\000\000\000\000\131\255\255\255\
\000\000\205\255\161\000\000\000\000\000\107\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yytablesize = 1030
let yytable = "\089\000\
\022\000\050\000\046\000\039\000\040\000\083\000\044\000\045\000\
\153\000\048\000\001\000\051\000\091\000\092\000\093\000\094\000\
\095\000\034\000\076\000\034\000\077\000\034\000\160\000\076\000\
\034\000\077\000\052\000\034\000\034\000\034\000\034\000\034\000\
\034\000\071\000\034\000\053\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\054\000\083\000\047\000\030\000\
\088\000\048\000\090\000\056\000\029\000\056\000\029\000\056\000\
\098\000\101\000\056\000\055\000\104\000\105\000\107\000\108\000\
\109\000\110\000\056\000\112\000\113\000\114\000\115\000\116\000\
\117\000\118\000\119\000\120\000\121\000\065\000\066\000\122\000\
\149\000\068\000\151\000\145\000\147\000\057\000\005\000\080\000\
\006\000\058\000\080\000\059\000\152\000\145\000\154\000\081\000\
\077\000\008\000\081\000\158\000\139\000\060\000\078\000\009\000\
\141\000\046\000\080\000\145\000\106\000\068\000\169\000\086\000\
\038\000\167\000\168\000\051\000\081\000\051\000\087\000\051\000\
\111\000\102\000\051\000\123\000\172\000\124\000\150\000\125\000\
\025\000\026\000\027\000\028\000\029\000\128\000\130\000\155\000\
\131\000\132\000\136\000\005\000\098\000\006\000\133\000\007\000\
\082\000\063\000\064\000\065\000\066\000\067\000\008\000\068\000\
\134\000\135\000\107\000\137\000\009\000\140\000\148\000\142\000\
\048\000\159\000\161\000\170\000\163\000\010\000\011\000\012\000\
\164\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\005\000\078\000\006\000\047\000\007\000\047\000\
\166\000\047\000\171\000\028\000\047\000\008\000\079\000\047\000\
\060\000\064\000\074\000\009\000\063\000\156\000\065\000\066\000\
\067\000\026\000\068\000\065\000\010\000\011\000\012\000\047\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\063\000\064\000\065\000\066\000\061\000\075\000\068\000\
\046\000\027\000\046\000\043\000\046\000\028\000\126\000\046\000\
\157\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\046\000\046\000\022\000\022\000\022\000\022\000\022\000\
\022\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\005\000\000\000\006\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\063\000\064\000\065\000\
\066\000\067\000\009\000\068\000\000\000\069\000\070\000\071\000\
\072\000\073\000\074\000\010\000\011\000\012\000\000\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\005\000\000\000\006\000\000\000\000\000\000\000\000\000\005\000\
\000\000\006\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\009\000\008\000\000\000\000\000\000\000\165\000\000\000\
\009\000\000\000\038\000\000\000\063\000\064\000\065\000\066\000\
\067\000\038\000\068\000\000\000\000\000\000\000\071\000\072\000\
\073\000\074\000\025\000\026\000\027\000\028\000\029\000\000\000\
\000\000\025\000\026\000\027\000\028\000\029\000\035\000\000\000\
\035\000\000\000\035\000\000\000\000\000\035\000\000\000\000\000\
\035\000\035\000\035\000\035\000\035\000\035\000\070\000\035\000\
\000\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\049\000\000\000\049\000\000\000\049\000\000\000\000\000\
\049\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\050\000\000\000\050\000\000\000\
\050\000\000\000\000\000\050\000\000\000\000\000\050\000\050\000\
\050\000\050\000\050\000\050\000\000\000\000\000\000\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\038\000\
\000\000\038\000\000\000\038\000\000\000\000\000\038\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
\000\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\039\000\000\000\039\000\000\000\039\000\000\000\
\000\000\039\000\000\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\000\000\061\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\062\000\063\000\064\000\
\065\000\066\000\067\000\000\000\068\000\162\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\000\000\062\000\
\063\000\064\000\065\000\066\000\067\000\000\000\068\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\036\000\000\000\036\000\000\000\036\000\000\000\000\000\036\000\
\000\000\000\000\036\000\036\000\036\000\000\000\000\000\036\000\
\000\000\000\000\000\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\037\000\000\000\037\000\000\000\037\000\
\000\000\000\000\037\000\000\000\000\000\037\000\037\000\037\000\
\000\000\000\000\037\000\000\000\000\000\000\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\048\000\000\000\
\048\000\000\000\048\000\000\000\000\000\048\000\000\000\000\000\
\048\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\042\000\000\000\042\000\000\000\042\000\000\000\000\000\
\042\000\000\000\000\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\043\000\000\000\043\000\000\000\
\043\000\000\000\000\000\043\000\000\000\000\000\043\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\044\000\
\000\000\044\000\000\000\044\000\000\000\000\000\044\000\000\000\
\000\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\045\000\000\000\045\000\000\000\045\000\000\000\
\000\000\045\000\000\000\000\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\057\000\000\000\057\000\
\000\000\057\000\000\000\000\000\057\000\000\000\000\000\057\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\040\000\000\000\040\000\000\000\040\000\000\000\000\000\040\000\
\000\000\000\000\040\000\041\000\000\000\041\000\000\000\041\000\
\000\000\000\000\041\000\040\000\040\000\041\000\000\000\000\000\
\000\000\040\000\040\000\000\000\000\000\000\000\041\000\041\000\
\079\000\000\000\000\000\000\000\041\000\041\000\000\000\000\000\
\062\000\063\000\064\000\065\000\066\000\067\000\000\000\068\000\
\000\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\062\000\063\000\064\000\065\000\066\000\067\000\000\000\
\068\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\129\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\063\000\064\000\065\000\066\000\067\000\
\000\000\068\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\138\000\000\000\000\000\000\000\000\000\
\000\000\062\000\063\000\064\000\065\000\066\000\067\000\000\000\
\068\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\143\000\000\000\000\000\000\000\000\000\000\000\
\062\000\063\000\064\000\065\000\066\000\067\000\000\000\068\000\
\000\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\062\000\063\000\064\000\065\000\066\000\067\000\000\000\
\068\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\062\000\063\000\156\000\065\000\066\000\067\000\
\000\000\068\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\063\000\064\000\065\000\066\000\067\000\
\000\000\068\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\063\000\064\000\065\000\066\000\067\000\
\000\000\068\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\015\000\016\000\017\000\018\000\
\144\000\020\000\021\000\022\000\023\000\024\000"

let yycheck = "\051\000\
\000\000\002\001\002\001\005\000\006\000\046\000\008\000\009\000\
\134\000\011\000\001\000\002\001\053\000\054\000\055\000\056\000\
\057\000\001\001\003\001\003\001\003\001\005\001\148\000\008\001\
\008\001\008\001\002\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\022\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\022\001\086\000\046\001\000\000\
\050\000\051\000\052\000\001\001\001\001\003\001\003\001\005\001\
\058\000\059\000\008\001\022\001\062\000\063\000\064\000\065\000\
\066\000\067\000\022\001\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\014\001\015\001\081\000\
\127\000\018\001\129\000\124\000\125\000\002\001\002\001\005\001\
\004\001\002\001\008\001\004\001\133\000\134\000\135\000\005\001\
\004\001\013\001\008\001\146\000\102\000\046\001\017\001\019\001\
\106\000\002\001\005\001\148\000\024\001\018\001\162\000\002\001\
\028\001\160\000\161\000\001\001\008\001\003\001\001\001\005\001\
\046\001\017\001\008\001\046\001\171\000\003\001\128\000\008\001\
\044\001\045\001\046\001\047\001\048\001\001\001\024\001\137\000\
\024\001\024\001\003\001\002\001\142\000\004\001\008\001\006\001\
\007\001\012\001\013\001\014\001\015\001\016\001\013\001\018\001\
\001\001\008\001\156\000\008\001\019\001\001\001\003\001\002\001\
\162\000\046\001\031\001\165\000\024\001\028\001\029\001\030\001\
\003\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\002\001\005\001\004\001\001\001\006\001\003\001\
\003\001\005\001\003\001\001\001\008\001\013\001\005\001\011\001\
\003\001\001\001\003\001\019\001\012\001\013\001\014\001\015\001\
\016\001\001\001\018\001\001\001\028\001\029\001\030\001\027\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\012\001\013\001\014\001\015\001\003\001\003\001\018\001\
\001\001\001\001\003\001\007\000\005\001\003\001\086\000\008\001\
\142\000\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\026\001\027\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\002\001\255\255\004\001\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\012\001\013\001\014\001\
\015\001\016\001\019\001\018\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\028\001\029\001\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\002\001\255\255\004\001\255\255\255\255\255\255\255\255\002\001\
\255\255\004\001\255\255\013\001\255\255\255\255\255\255\255\255\
\255\255\019\001\013\001\255\255\255\255\255\255\024\001\255\255\
\019\001\255\255\028\001\255\255\012\001\013\001\014\001\015\001\
\016\001\028\001\018\001\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\044\001\045\001\046\001\047\001\048\001\001\001\255\255\
\003\001\255\255\005\001\255\255\255\255\008\001\255\255\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\001\001\255\255\003\001\255\255\005\001\255\255\255\255\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\001\001\255\255\003\001\255\255\
\005\001\255\255\255\255\008\001\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\001\001\
\255\255\003\001\255\255\005\001\255\255\255\255\008\001\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\001\001\255\255\003\001\255\255\005\001\255\255\
\255\255\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\001\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\001\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\001\001\255\255\003\001\255\255\005\001\255\255\255\255\008\001\
\255\255\255\255\011\001\012\001\013\001\255\255\255\255\016\001\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\001\001\255\255\003\001\255\255\005\001\
\255\255\255\255\008\001\255\255\255\255\011\001\012\001\013\001\
\255\255\255\255\016\001\255\255\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\001\001\255\255\
\003\001\255\255\005\001\255\255\255\255\008\001\255\255\255\255\
\011\001\255\255\255\255\255\255\255\255\016\001\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\001\001\255\255\003\001\255\255\005\001\255\255\255\255\
\008\001\255\255\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\001\001\255\255\003\001\255\255\
\005\001\255\255\255\255\008\001\255\255\255\255\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\001\001\
\255\255\003\001\255\255\005\001\255\255\255\255\008\001\255\255\
\255\255\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\001\001\255\255\003\001\255\255\005\001\255\255\
\255\255\008\001\255\255\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\001\001\255\255\003\001\
\255\255\005\001\255\255\255\255\008\001\255\255\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\001\001\255\255\003\001\255\255\005\001\255\255\255\255\008\001\
\255\255\255\255\011\001\001\001\255\255\003\001\255\255\005\001\
\255\255\255\255\008\001\020\001\021\001\011\001\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\020\001\021\001\
\003\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\003\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\003\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\005\001\255\255\255\255\255\255\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\005\001\255\255\255\255\255\255\255\255\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  COLON\000\
  DOLLAR\000\
  AT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  CONCAT\000\
  ASSIGN\000\
  DOT\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  FUNCTION\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  STRING\000\
  VOID\000\
  LIST\000\
  NODE\000\
  EDGE\000\
  GRAPH\000\
  FUNC\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  SLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 36 "gmailparse.mly"
                       ( List.rev _1 )
# 546 "gmailparse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "gmailparse.mly"
  ( [] )
# 552 "gmailparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 40 "gmailparse.mly"
                 ( _2 :: _1 )
# 560 "gmailparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "gmailparse.mly"
          ( Int   )
# 566 "gmailparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "gmailparse.mly"
          ( Bool  )
# 572 "gmailparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "gmailparse.mly"
          ( Float )
# 578 "gmailparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "gmailparse.mly"
          ( Void  )
# 584 "gmailparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "gmailparse.mly"
           ( String )
# 590 "gmailparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 49 "gmailparse.mly"
                   ( Lst(_3) )
# 597 "gmailparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 50 "gmailparse.mly"
                   ( Node(_3) )
# 604 "gmailparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 51 "gmailparse.mly"
                   ( Edge(_3) )
# 611 "gmailparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 52 "gmailparse.mly"
                              ( Graph(_3, _5) )
# 619 "gmailparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_type) in
    Obj.repr(
# 53 "gmailparse.mly"
              ( Func(_1) )
# 626 "gmailparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'ret_typ) in
    Obj.repr(
# 58 "gmailparse.mly"
    ( { param_typs = _3;
        return_typ = _5 } )
# 635 "gmailparse.ml"
               : 'func_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "gmailparse.mly"
                   ( [] )
# 641 "gmailparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 78 "gmailparse.mly"
                   ( _2 :: _1 )
# 649 "gmailparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 81 "gmailparse.mly"
                                            ( Expr _1               )
# 656 "gmailparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_init) in
    Obj.repr(
# 82 "gmailparse.mly"
                                            ( VDecl(_1, _2, _3) )
# 665 "gmailparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 83 "gmailparse.mly"
                                            ( Return _2             )
# 672 "gmailparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'params_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'ret_typ) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "gmailparse.mly"
                                                      (
      VDecl(Func({param_typs = List.map (fun (ty, _) -> ty) _4; return_typ = _6 }),
      _2, Some(FExpr({ name = _2; typ = _6; params = _4; body = _7 }))))
# 684 "gmailparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 88 "gmailparse.mly"
                                            ( Block(List.rev _2)    )
# 691 "gmailparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "gmailparse.mly"
                                            ( If(_3, _5, Block([])) )
# 699 "gmailparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "gmailparse.mly"
                                            ( If(_3, _5, _7)        )
# 708 "gmailparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "gmailparse.mly"
                                            ( For(_3, _5, _7, _9)   )
# 718 "gmailparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "gmailparse.mly"
                                            ( While(_3, _5)         )
# 726 "gmailparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "gmailparse.mly"
    ( None )
# 732 "gmailparse.ml"
               : 'opt_init))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "gmailparse.mly"
                ( Some(_2) )
# 739 "gmailparse.ml"
               : 'opt_init))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "gmailparse.mly"
    ( Noexpr )
# 745 "gmailparse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "gmailparse.mly"
                  ( _1 )
# 752 "gmailparse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 104 "gmailparse.mly"
                     ( Literal(_1)            )
# 759 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "gmailparse.mly"
                    ( Fliteral(_1)           )
# 766 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 106 "gmailparse.mly"
                     ( BoolLit(_1)            )
# 773 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "gmailparse.mly"
                     ( StrLit(_1)             )
# 780 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "gmailparse.mly"
                     ( Id(_1)                 )
# 787 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arr_el) in
    Obj.repr(
# 109 "gmailparse.mly"
                     ( ArrEl(_1) )
# 794 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "gmailparse.mly"
                     ( Binop(_1, Add,   _3)   )
# 802 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "gmailparse.mly"
                     ( Binop(_1, Sub,   _3)   )
# 810 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "gmailparse.mly"
                     ( Binop(_1, Mult,  _3)   )
# 818 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "gmailparse.mly"
                     ( Binop(_1, Div,   _3)   )
# 826 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "gmailparse.mly"
                     ( Binop(_1, Equal, _3)   )
# 834 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "gmailparse.mly"
                     ( Binop(_1, Neq,   _3)   )
# 842 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "gmailparse.mly"
                     ( Binop(_1, Less,  _3)   )
# 850 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "gmailparse.mly"
                     ( Binop(_1, Leq,   _3)   )
# 858 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "gmailparse.mly"
                     ( Binop(_1, Greater, _3) )
# 866 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "gmailparse.mly"
                     ( Binop(_1, Geq,   _3)   )
# 874 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "gmailparse.mly"
                     ( Binop(_1, And,   _3)   )
# 882 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "gmailparse.mly"
                     ( Binop(_1, Or,    _3)   )
# 890 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "gmailparse.mly"
                     ( Binop(_1, Concat, _3)  )
# 898 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "gmailparse.mly"
                         ( Unop(Neg, _2)      )
# 905 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "gmailparse.mly"
                     ( Unop(Not, _2)          )
# 912 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lval) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "gmailparse.mly"
                       ( Assign(_1, _3)         )
# 920 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 126 "gmailparse.mly"
                              ( Call(_1, _3)  )
# 928 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 127 "gmailparse.mly"
                                       (CMCall(_3, _1::_5))
# 937 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 128 "gmailparse.mly"
                       ( _2                   )
# 944 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprs_opt) in
    Obj.repr(
# 129 "gmailparse.mly"
                            ( Seq(_2) )
# 951 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "gmailparse.mly"
                 ( NodeExpr(_1, _3) )
# 959 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "gmailparse.mly"
                                     ( EdgeExpr(_1, _4, _7) )
# 968 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_expr) in
    Obj.repr(
# 134 "gmailparse.mly"
                  ( FExpr(_1) )
# 975 "gmailparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'params_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'ret_typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 139 "gmailparse.mly"
    ( { name = "";
        params = _3;
        typ = _5;
        body = _6} )
# 987 "gmailparse.ml"
               : 'function_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "gmailparse.mly"
    ( [] )
# 993 "gmailparse.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 146 "gmailparse.mly"
               ( List.rev _1 )
# 1000 "gmailparse.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 149 "gmailparse.mly"
         ( [(_1, _2)] )
# 1008 "gmailparse.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'param_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 150 "gmailparse.mly"
                          ( (_3, _4) :: _1 )
# 1017 "gmailparse.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "gmailparse.mly"
  ( [] )
# 1023 "gmailparse.ml"
               : 'typ_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ_list) in
    Obj.repr(
# 154 "gmailparse.mly"
             ( List.rev _1 )
# 1030 "gmailparse.ml"
               : 'typ_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 157 "gmailparse.mly"
      ( [_1] )
# 1037 "gmailparse.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 158 "gmailparse.mly"
                     ( _3 :: _1 )
# 1045 "gmailparse.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "gmailparse.mly"
       ( Void )
# 1051 "gmailparse.ml"
               : 'ret_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 162 "gmailparse.mly"
      ( _1 )
# 1058 "gmailparse.ml"
               : 'ret_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arr_el) in
    Obj.repr(
# 165 "gmailparse.mly"
           ( LArrEl(_1) )
# 1065 "gmailparse.ml"
               : 'lval))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 166 "gmailparse.mly"
       ( LId(_1))
# 1072 "gmailparse.ml"
               : 'lval))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 169 "gmailparse.mly"
                          (OneDim(_1, _3))
# 1080 "gmailparse.ml"
               : 'arr_el))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'arr_el) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 170 "gmailparse.mly"
                              (MultiDim(_1, _3))
# 1088 "gmailparse.ml"
               : 'arr_el))
; (fun __caml_parser_env ->
    Obj.repr(
# 173 "gmailparse.mly"
                  ( [] )
# 1094 "gmailparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 174 "gmailparse.mly"
               ( List.rev _1 )
# 1101 "gmailparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "gmailparse.mly"
                            ( [_1] )
# 1108 "gmailparse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "gmailparse.mly"
                         ( _3 :: _1 )
# 1116 "gmailparse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "gmailparse.mly"
                  ( [] )
# 1122 "gmailparse.ml"
               : 'exprs_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exprs_list) in
    Obj.repr(
# 182 "gmailparse.mly"
                ( List.rev _1 )
# 1129 "gmailparse.ml"
               : 'exprs_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "gmailparse.mly"
                            ( [_1] )
# 1136 "gmailparse.ml"
               : 'exprs_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 186 "gmailparse.mly"
                          ( _3 :: _1 )
# 1144 "gmailparse.ml"
               : 'exprs_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
